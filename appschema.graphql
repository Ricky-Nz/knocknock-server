schema {
  query: Query
  mutation: Mutation
}

input AddCreditCardInput {
  tokenId: String!
  stripeCardId: String!
  brand: String!
  cvcCheck: String!
  last4: String!
  name: String!
  country: String
  expMonth: String
  expYear: String
  funding: String
  clientMutationId: String!
}

type AddCreditCardPayload {
  creditCardEdge: CreditCardEdge
  user: LoginUser
  clientMutationId: String!
}

type Address implements Node {
  id: ID!
  userId: String
  postalCode: String
  address: String
  unitNumber: String
  contact: String
}

type AddressConnection {
  pageInfo: PageInfo!
  edges: [AddressEdge]
}

type AddressEdge {
  node: Address
  cursor: String!
}

type AssignedVoucher implements Node {
  id: ID!
  userId: String!
  used: Boolean
  createdAt: String
  voucher: Voucher
}

type AssignedVoucherConnection {
  pageInfo: PageInfo!
  edges: [AssignedVoucherEdge]
}

type AssignedVoucherEdge {
  node: AssignedVoucher
  cursor: String!
}

type Banner implements Node {
  id: ID!
  enabled: Boolean
  title: String
  link: String
  position: Int
  imageUrl: String
}

input CancelOrderInput {
  id: String!
  clientMutationId: String!
}

type CancelOrderPayload {
  deletedId: String!
  user: LoginUser
  clientMutationId: String!
}

type Category implements Node {
  id: ID!
  nameCn: String!
  nameEn: String!
}

type Cloth implements Node {
  id: ID!
  categoryId: String!
  nameEn: String!
  nameCn: String!
  washPrice: Float
  dryCleanPrice: Float
  ironPrice: Float
  discountWashPrice: Float
  discountDryCleanPrice: Float
  discountIronPrice: Float
  enableWashPriceDiscount: Boolean
  enableDryCleanPriceDiscount: Boolean
  enableIronPriceDiscount: Boolean
  special: Boolean
  hideFromUser: Boolean
  enabled: Boolean
  imageUrl: String
  name: String!
  wash: String
  dry: String
  iron: String
  washD: String
  dryD: String
  ironD: String
}

input CreateAddressInput {
  postalCode: String!
  address: String!
  unitNumber: String!
  contact: String!
  clientMutationId: String!
}

type CreateAddressPayload {
  addressEdge: AddressEdge
  user: LoginUser
  clientMutationId: String!
}

input CreateOrderInput {
  express: Boolean
  note: String
  date: String!
  hour: Int!
  addressId: String!
  orderItems: [OrderItemInput]
  clientMutationId: String!
}

type CreateOrderPayload {
  orderEdge: OrderEdge
  user: LoginUser
  clientMutationId: String!
}

type CreditCard implements Node {
  id: ID!
  brand: String
  name: String
  asteriskNumber: String
  expireOn: String
}

type CreditCardConnection {
  pageInfo: PageInfo!
  edges: [CreditCardEdge]
}

type CreditCardEdge {
  node: CreditCard
  cursor: String!
}

type CreditRecord implements Node {
  id: ID!
  amount: Float
  paymentRefNo: String
  topUp: Boolean
  createdAt: String
  paymentMode: String
  status: Int
  approvedAt: String
  approvedBy: String
  description: Boolean
  user: UserRef
}

type CreditRecordConnection {
  pageInfo: PageInfo!
  edges: [CreditRecordEdge]
}

type CreditRecordEdge {
  node: CreditRecord
  cursor: String!
}

input DeleteAddressInput {
  id: String!
  clientMutationId: String!
}

type DeleteAddressPayload {
  deletedId: String!
  user: LoginUser
  clientMutationId: String!
}

type LoginUser implements Node {
  id: ID!
  verified: Boolean
  profileComplete: Boolean
  orders(after: String, first: Int, before: String, last: Int): OrderConnection
  histories(after: String, first: Int, before: String, last: Int): OrderConnection
  toPayOrders(after: String, first: Int, before: String, last: Int): OrderConnection
  banners: [Banner]
  categories: [Category]
  clothes(search: String, categoryId: String, clothIds: [String]): [Cloth]
  creditRecords(after: String, first: Int, before: String, last: Int): CreditRecordConnection
  creditCards(after: String, first: Int, before: String, last: Int): CreditCardConnection
  vouchers(after: String, first: Int, before: String, last: Int): AssignedVoucherConnection
  availableVouchers: [AssignedVoucher]
  addresses(after: String, first: Int, before: String, last: Int): AddressConnection
  userAddress(id: String!): Address
  toPayCount: Int!
  voucherCount: Int!
  blockedPickupDayOfMonth(year: Int!, month: Int!): [Int]
  blockedDropOffDayOfMonth(year: Int!, month: Int!): [Int]
  timeSlots(date: String!): [TimeSlot]
  credits: Float
  firstName: String
  lastName: String
  email: String
  contact: String
  plusAccount: String
  avatarUrl: String
  promoCode(code: String!): PromoCode
  order(id: String!): Order
  address(postalCode: String): String
  paypalPayUrl: String
}

type Mutation {
  updateProfile(input: UpdateProfileInput!): UpdateProfilePayload
  requestPhoneNumberVerify(input: RequestPhoneNumberVerifyInput!): RequestPhoneNumberVerifyPayload
  verifyPhoneNumber(input: VerifyPhoneNumberInput!): VerifyPhoneNumberPayload
  createAddress(input: CreateAddressInput!): CreateAddressPayload
  updateAddress(input: UpdateAddressInput!): UpdateAddressPayload
  deleteAddress(input: DeleteAddressInput!): DeleteAddressPayload
  cancelOrder(input: CancelOrderInput!): CancelOrderPayload
  createOrder(input: CreateOrderInput!): CreateOrderPayload
  setOrderDeliveryDate(input: SetOrderDeliveryDateInput!): SetOrderDeliveryDatePayload
  payOrderByCredit(input: PayOrderByCreditInput!): PayOrderByCreditPayload
  payOrderByPaypal(input: PayOrderByPaypalInput!): PayOrderByPaypalPayload
  payOrderByStripe(input: PayOrderByStripeInput!): PayOrderByStripePayload
  topUpByStripeCardId(input: TopUpByStripeCardIdInput!): TopUpByStripeCardIdPayload
  topUpByStripeToken(input: TopUpByStripeTokenInput!): TopUpByStripeTokenPayload
  requrestPaypalTopUp(input: RequrestPaypalTopUpInput!): RequrestPaypalTopUpPayload
  addCreditCard(input: AddCreditCardInput!): AddCreditCardPayload
  removeCreditCard(input: RemoveCreditCardInput!): RemoveCreditCardPayload
}

interface Node {
  id: ID!
}

type Order implements Node {
  id: ID!
  displayId: Int
  userId: String
  express: Boolean
  paid: Boolean
  paymentMode: String
  promoCode: PromoCode
  voucher: Voucher
  note: String
  status: OrderStatus
  pickupDate: String
  displayPickupDate: String
  displayDropOffDate: String
  pickupTime: String
  pickupContact: String
  dropOffContact: String
  displayPickupAddress: String
  displayDropOffAddress: String
  pickupAddress: String
  pickupWorkerId: String
  factoryId: String
  totalPrice: Float
  toPayPrice: Float
  userAvatar: String
  orderItems(after: String, first: Int, before: String, last: Int): OrderItemConnection
}

type OrderConnection {
  pageInfo: PageInfo!
  edges: [OrderEdge]
}

type OrderEdge {
  node: Order
  cursor: String!
}

type OrderItem implements Node {
  id: ID!
  orederId: String
  productId: String
  washType: String
  quantity: Int
  price: Float
  cloth: Cloth
}

type OrderItemConnection {
  pageInfo: PageInfo!
  edges: [OrderItemEdge]
}

type OrderItemEdge {
  node: OrderItem
  cursor: String!
}

input OrderItemInput {
  id: String!
  wash: Int
  dry: Int
  iron: Int
}

type OrderStatus implements Node {
  id: ID!
  status: String
  stage: Int
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

input PayOrderByCreditInput {
  orderId: String!
  voucherId: String
  promoCodeId: String
  clientMutationId: String!
}

type PayOrderByCreditPayload {
  order: Order
  clientMutationId: String!
}

input PayOrderByPaypalInput {
  orderId: String!
  voucherId: String
  promoCodeId: String
  clientMutationId: String!
}

type PayOrderByPaypalPayload {
  user: LoginUser
  clientMutationId: String!
}

input PayOrderByStripeInput {
  orderId: String!
  tokenId: String
  cardId: String
  voucherId: String
  promoCodeId: String
  clientMutationId: String!
}

type PayOrderByStripePayload {
  order: Order
  clientMutationId: String!
}

type PromoCode implements Node {
  id: ID!
  enabled: Boolean
  name: String
  description: String
  start: String
  end: String
  perUserLimit: Int
  limit: Int
  promoType: String
  flatDiscount: Float
  discountPercent: Float
  multipleUse: Boolean
  mobileOnly: Boolean
  firstTimeUser: Boolean
}

type Query {
  user: LoginUser
  node(id: ID!): Node
}

input RemoveCreditCardInput {
  id: String!
  clientMutationId: String!
}

type RemoveCreditCardPayload {
  deletedId: String!
  user: LoginUser
  clientMutationId: String!
}

input RequestPhoneNumberVerifyInput {
  countryCode: String!
  number: String!
  clientMutationId: String!
}

type RequestPhoneNumberVerifyPayload {
  user: LoginUser
  clientMutationId: String!
}

input RequrestPaypalTopUpInput {
  amount: Float!
  currency: String!
  clientMutationId: String!
}

type RequrestPaypalTopUpPayload {
  user: LoginUser
  clientMutationId: String!
}

input SetOrderDeliveryDateInput {
  orderId: String!
  addressId: String!
  date: String!
  hour: Int!
  clientMutationId: String!
}

type SetOrderDeliveryDatePayload {
  order: Order
  clientMutationId: String!
}

type TimeSlot implements Node {
  id: ID!
  displayTime: String
  hour: Int
  enabled: Boolean
}

input TopUpByStripeCardIdInput {
  amount: Int!
  cardId: String!
  clientMutationId: String!
}

type TopUpByStripeCardIdPayload {
  user: LoginUser
  clientMutationId: String!
}

input TopUpByStripeTokenInput {
  amount: Int!
  tokenId: String!
  clientMutationId: String!
}

type TopUpByStripeTokenPayload {
  user: LoginUser
  clientMutationId: String!
}

input UpdateAddressInput {
  id: String!
  postalCode: String
  address: String
  unitNumber: String
  contact: String
  clientMutationId: String!
}

type UpdateAddressPayload {
  address: Address
  clientMutationId: String!
}

input UpdateProfileInput {
  newPassword: String
  firstName: String
  lastName: String
  password: String
  plusAccount: String
  clientMutationId: String!
}

type UpdateProfilePayload {
  user: LoginUser
  clientMutationId: String!
}

type UserRef {
  userId: String!
  firstName: String
  lastName: String
  email: String
  avatarUrl: String
}

input VerifyPhoneNumberInput {
  code: String!
  clientMutationId: String!
}

type VerifyPhoneNumberPayload {
  user: LoginUser
  clientMutationId: String!
}

type Voucher implements Node {
  id: ID!
  title: String
  value: Float
  displayExpireOn: String
  expireOn: String
  expired: Boolean
  enabled: Boolean
  createdAt: String
}
