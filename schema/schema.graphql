schema {
  query: Query
  mutation: Mutation
}

type Cloth implements Node {
  id: ID!
  categoryId: String!
  nameEn: String!
  nameCn: String!
  washPrice: Float!
  dryCleanPrice: Float!
  ironPrice: Float!
  washPriceDiscount: Float!
  dryCleanPriceDiscount: Float!
  ironPriceDiscount: Float!
  special: Boolean
  imageUrl: String
}

type ClothCategory implements Node {
  id: ID!
  nameCn: String!
  nameEn: String!
  count: Int!
}

type ClothPagination {
  id: ID!
  pagination: Pagination!
  datas: [Cloth]
}

input CreateCategoryInput {
  nameCn: String!
  nameEn: String!
  clientMutationId: String!
}

type CreateCategoryPayload {
  clothCategories: [ClothCategory]
  clientMutationId: String!
}

input CreateClothInput {
  limit: Int!
  categoryId: String!
  nameEn: String!
  nameCn: String!
  washPrice: Float!
  dryCleanPrice: Float!
  ironPrice: Float!
  washPriceDiscount: Float!
  dryCleanPriceDiscount: Float!
  ironPriceDiscount: Float!
  special: Boolean
  clientMutationId: String!
}

type CreateClothPayload {
  clothPage: ClothPagination
  clientMutationId: String!
}

input DeleteClothInput {
  id: String!
  clientMutationId: String!
}

type DeleteClothPayload {
  clothPage: ClothPagination
  clientMutationId: String!
}

input DleteCategoryInput {
  id: String!
  clientMutationId: String!
}

type DleteCategoryPayload {
  clothCategories: [ClothCategory]
  clientMutationId: String!
}

type Mutation {
  createCloth(input: CreateClothInput!): CreateClothPayload
  updateCloth(input: UpdateClothInput!): UpdateClothPayload
  deleteCloth(input: DeleteClothInput!): DeleteClothPayload
  createCategory(input: CreateCategoryInput!): CreateCategoryPayload
  updateCategory(input: UpdateCategoryInput!): UpdateCategoryPayload
  deleteCategory(input: DleteCategoryInput!): DleteCategoryPayload
}

interface Node {
  id: ID!
}

type Pagination {
  search: String
  page: Int!
  limit: Int!
  totalPage: Int!
}

type Query {
  viewer: Viewer
  node(id: ID!): Node
}

enum Role {
  Client
  Worker
  Admin
}

input UpdateCategoryInput {
  id: String!
  nameCn: String
  nameEn: String
  clientMutationId: String!
}

type UpdateCategoryPayload {
  clothCategory: ClothCategory
  clientMutationId: String!
}

input UpdateClothInput {
  id: String!
  categoryId: String
  nameEn: String
  nameCn: String
  washPrice: Float
  dryCleanPrice: Float
  ironPrice: Float
  washPriceDiscount: Float
  dryCleanPriceDiscount: Float
  ironPriceDiscount: Float
  special: Boolean
  clientMutationId: String!
}

type UpdateClothPayload {
  cloth: Cloth
  clientMutationId: String!
}

type User implements Node {
  id: ID!
  role: Role!
  email: String!
  name: String
  contact: String
  avatarUrl: String
  emailVerified: Boolean
  contactVerified: Boolean
}

type UserPagination {
  id: ID!
  pagination: Pagination!
  datas: [User]
}

type Viewer implements Node {
  id: ID!
  user(id: String): User
  userPage(role: String!, search: String, page: Int!, limit: Int!): UserPagination
  cloth(id: String!): Cloth
  clothPage(categoryId: String, search: String, page: Int!, limit: Int!): ClothPagination
  clothCategories: [ClothCategory]
}
