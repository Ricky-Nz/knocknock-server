schema {
  query: Query
  mutation: Mutation
}

type Address implements Node {
  id: ID!
  userId: String!
  postalCode: String!
  address: String!
  contact: String!
}

type AddressConnection {
  pageInfo: PageInfo!
  edges: [AddressEdge]
}

type AddressEdge {
  node: Address
  cursor: String!
}

type Cloth implements Node {
  id: ID!
  categoryId: String!
  nameEn: String!
  nameCn: String!
  washPrice: Float!
  dryCleanPrice: Float!
  ironPrice: Float!
  washPriceDiscount: Float!
  dryCleanPriceDiscount: Float!
  ironPriceDiscount: Float!
  special: Boolean
  imageUrl: String
}

type ClothCategory implements Node {
  id: ID!
  nameCn: String!
  nameEn: String!
  count: Int!
}

type ClothCategoryConnection {
  pageInfo: PageInfo!
  edges: [ClothCategoryEdge]
}

type ClothCategoryEdge {
  node: ClothCategory
  cursor: String!
}

type ClothConnection {
  pageInfo: PageInfo!
  edges: [ClothEdge]
}

type ClothEdge {
  node: Cloth
  cursor: String!
}

input CreateAddressInput {
  userId: String!
  postalCode: String!
  address: String!
  contact: String!
  clientMutationId: String!
}

type CreateAddressPayload {
  addressEdge: AddressEdge
  user: User
  clientMutationId: String!
}

input CreateCategoryInput {
  nameCn: String!
  nameEn: String!
  clientMutationId: String!
}

type CreateCategoryPayload {
  categoryEdge: ClothCategoryEdge
  viewer: Viewer
  clientMutationId: String!
}

input CreateClothInput {
  categoryId: String!
  nameEn: String!
  nameCn: String!
  washPrice: Float!
  dryCleanPrice: Float!
  ironPrice: Float!
  washPriceDiscount: Float!
  dryCleanPriceDiscount: Float!
  ironPriceDiscount: Float!
  special: Boolean
  clientMutationId: String!
}

type CreateClothPayload {
  clothEdge: ClothEdge
  viewer: Viewer
  clientMutationId: String!
}

input CreateUserInput {
  role: String!
  email: String!
  name: String
  contact: String
  password: String!
  clientMutationId: String!
}

type CreateUserPayload {
  userEdge: UserEdge
  viewer: Viewer
  clientMutationId: String!
}

input DeleteAddressInput {
  id: String!
  clientMutationId: String!
}

type DeleteAddressPayload {
  deletedId: String!
  viewer: User
  clientMutationId: String!
}

input DeleteCategoryInput {
  id: String!
  clientMutationId: String!
}

type DeleteCategoryPayload {
  deletedId: String!
  viewer: Viewer
  clientMutationId: String!
}

input DeleteClothInput {
  id: String!
  clientMutationId: String!
}

type DeleteClothPayload {
  deletedId: String!
  viewer: Viewer
  clientMutationId: String!
}

type Mutation {
  createCloth(input: CreateClothInput!): CreateClothPayload
  updateCloth(input: UpdateClothInput!): UpdateClothPayload
  deleteCloth(input: DeleteClothInput!): DeleteClothPayload
  createCategory(input: CreateCategoryInput!): CreateCategoryPayload
  updateCategory(input: UpdateCategoryInput!): UpdateCategoryPayload
  deleteCategory(input: DeleteCategoryInput!): DeleteCategoryPayload
  createUser(input: CreateUserInput!): CreateUserPayload
  updateUser(input: UpdateUserInput!): UpdateUserPayload
  createAddress(input: CreateAddressInput!): CreateAddressPayload
  updateAddress(input: UpdateAddressInput!): UpdateAddressPayload
  deleteAddress(input: DeleteAddressInput!): DeleteAddressPayload
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Pagination {
  search: String
  page: Int
  limit: Int
  totalPage: Int!
}

type Query {
  viewer: Viewer
  node(id: ID!): Node
}

input UpdateAddressInput {
  id: String!
  postalCode: String
  address: String
  contact: String
  clientMutationId: String!
}

type UpdateAddressPayload {
  address: Address
  clientMutationId: String!
}

input UpdateCategoryInput {
  id: String!
  nameCn: String
  nameEn: String
  clientMutationId: String!
}

type UpdateCategoryPayload {
  category: ClothCategory
  clientMutationId: String!
}

input UpdateClothInput {
  id: String!
  categoryId: String
  nameEn: String
  nameCn: String
  washPrice: Float
  dryCleanPrice: Float
  ironPrice: Float
  washPriceDiscount: Float
  dryCleanPriceDiscount: Float
  ironPriceDiscount: Float
  special: Boolean
  clientMutationId: String!
}

type UpdateClothPayload {
  cloth: Cloth
  clientMutationId: String!
}

input UpdateUserInput {
  id: String!
  name: String
  contact: String
  password: String
  clientMutationId: String!
}

type UpdateUserPayload {
  user: User
  clientMutationId: String!
}

type User implements Node {
  id: ID!
  role: String!
  email: String!
  name: String
  contact: String
  avatarUrl: String
  emailVerified: Boolean
  contactVerified: Boolean
  addresses(after: String, first: Int, before: String, last: Int): AddressConnection
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]
}

type UserEdge {
  node: User
  cursor: String!
}

type UserPagination {
  id: ID!
  pagination: Pagination!
  datas: [User]
}

type Viewer implements Node {
  id: ID!
  user(id: String!): User
  users(role: String!, search: String, after: String, first: Int, before: String, last: Int): UserConnection
  userPage(role: String!, search: String, page: Int, limit: Int): UserPagination
  cloth(id: String!): Cloth
  clothes(after: String, first: Int, before: String, last: Int): ClothConnection
  categories(after: String, first: Int, before: String, last: Int): ClothCategoryConnection
}
