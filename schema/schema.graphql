schema {
  query: Query
  mutation: Mutation
}

type Address implements Node {
  id: ID!
  userId: String!
  postalCode: String!
  address: String!
  contact: String!
}

type AddressConnection {
  pageInfo: PageInfo!
  edges: [AddressEdge]
}

type AddressEdge {
  node: Address
  cursor: String!
}

type Admin implements Node {
  id: ID!
  email: String!
  name: String!
  contact: String
}

type AdminConnection {
  pageInfo: PageInfo!
  edges: [AdminEdge]
}

type AdminEdge {
  node: Admin
  cursor: String!
}

type Banner implements Node {
  id: ID!
  enabled: Boolean
  title: String!
  link: String
  position: Int
  imageUrl: String!
}

type BannerConnection {
  pageInfo: PageInfo!
  edges: [BannerEdge]
}

type BannerEdge {
  node: Banner
  cursor: String!
}

type Cloth implements Node {
  id: ID!
  categoryId: String!
  nameEn: String!
  nameCn: String!
  washPrice: Float!
  dryCleanPrice: Float!
  ironPrice: Float!
  washPriceDiscount: Float!
  dryCleanPriceDiscount: Float!
  ironPriceDiscount: Float!
  special: Boolean
  imageUrl: String!
}

type ClothCategory implements Node {
  id: ID!
  nameCn: String!
  nameEn: String!
  count: Int
}

type ClothCategoryConnection {
  pageInfo: PageInfo!
  edges: [ClothCategoryEdge]
}

type ClothCategoryEdge {
  node: ClothCategory
  cursor: String!
}

type ClothConnection {
  pageInfo: PageInfo!
  edges: [ClothEdge]
}

type ClothEdge {
  node: Cloth
  cursor: String!
}

input CreateAddressInput {
  userId: String!
  postalCode: String!
  address: String!
  contact: String!
  clientMutationId: String!
}

type CreateAddressPayload {
  addressEdge: AddressEdge
  user: User
  clientMutationId: String!
}

input CreateAdminInput {
  email: String!
  password: String!
  name: String!
  contact: String
  clientMutationId: String!
}

type CreateAdminPayload {
  adminEdge: AdminEdge
  viewer: Viewer
  clientMutationId: String!
}

input CreateBannerInput {
  enabled: Boolean
  title: String!
  link: String
  position: Int
  clientMutationId: String!
}

type CreateBannerPayload {
  bannerEdge: BannerEdge
  viewer: Viewer
  clientMutationId: String!
}

input CreateCategoryInput {
  nameCn: String!
  nameEn: String!
  clientMutationId: String!
}

type CreateCategoryPayload {
  categoryEdge: ClothCategoryEdge
  viewer: Viewer
  clientMutationId: String!
}

input CreateClothInput {
  categoryId: String!
  nameEn: String!
  nameCn: String!
  washPrice: Float!
  dryCleanPrice: Float!
  ironPrice: Float!
  washPriceDiscount: Float!
  dryCleanPriceDiscount: Float!
  ironPriceDiscount: Float!
  special: Boolean
  clientMutationId: String!
}

type CreateClothPayload {
  clothEdge: ClothEdge
  viewer: Viewer
  clientMutationId: String!
}

input CreateFactoryInput {
  name: String!
  address: String!
  postalCode: String!
  contact: String!
  contactName: String!
  clientMutationId: String!
}

type CreateFactoryPayload {
  factoryEdge: FactoryEdge
  viewer: Viewer
  clientMutationId: String!
}

input CreateFeedbackInput {
  userId: String!
  rating: Float!
  comment: String
  source: String!
  clientMutationId: String!
}

type CreateFeedbackPayload {
  feedbackEdge: FeedbackEdge
  viewer: Viewer
  clientMutationId: String!
}

input CreateOrderInput {
  userId: String!
  express: Boolean
  note: String
  status: String
  pickupDate: String!
  pickupTime: String!
  pickupAddress: String!
  pickupWorkerId: String
  orderItems: [OrderItemInput]
  clientMutationId: String!
}

type CreateOrderPayload {
  orderEdge: OrderEdge
  user: User
  clientMutationId: String!
}

input CreatePromoCodeInput {
  enabled: Boolean!
  code: String
  name: String!
  description: String
  start: String!
  end: String!
  perUserLimit: Int!
  limit: Int!
  promoType: String!
  promoValue: Int!
  amount: Int!
  multipleUse: Boolean!
  mobileOnly: Boolean!
  firstTimeUser: Boolean!
  clientMutationId: String!
}

type CreatePromoCodePayload {
  promoCodeEdge: PromoCodeEdge
  viewer: Viewer
  clientMutationId: String!
}

input CreateTimeSlotTemplateInput {
  start: Int!
  end: Int!
  limit: Int!
  clientMutationId: String!
}

type CreateTimeSlotTemplatePayload {
  timeSlotTemplateEdge: TimeSlotTemplateEdge
  viewer: Viewer
  clientMutationId: String!
}

input CreateUserInput {
  email: String!
  password: String!
  name: String
  contact: String
  enabled: Boolean
  clientMutationId: String!
}

type CreateUserPayload {
  userEdge: UserEdge
  viewer: Viewer
  clientMutationId: String!
}

input CreateVoucherInput {
  userId: String!
  title: String!
  value: Float!
  expireOn: String!
  clientMutationId: String!
}

type CreateVoucherPayload {
  voucherEdge: VoucherEdge
  user: User
  clientMutationId: String!
}

input CreateWorkerInput {
  email: String!
  password: String!
  name: String!
  contact: String!
  enabled: Boolean!
  clientMutationId: String!
}

type CreateWorkerPayload {
  workerEdge: WorkerEdge
  viewer: Viewer
  clientMutationId: String!
}

input DeleteAddressInput {
  id: String!
  clientMutationId: String!
}

type DeleteAddressPayload {
  deletedId: String!
  user: User
  clientMutationId: String!
}

input DeleteAdminInput {
  id: String!
  clientMutationId: String!
}

type DeleteAdminPayload {
  deletedId: String!
  viewer: Viewer
  clientMutationId: String!
}

input DeleteBannerInput {
  id: String!
  clientMutationId: String!
}

type DeleteBannerPayload {
  deletedId: String!
  viewer: Viewer
  clientMutationId: String!
}

input DeleteCategoryInput {
  id: String!
  clientMutationId: String!
}

type DeleteCategoryPayload {
  deletedId: String!
  viewer: Viewer
  clientMutationId: String!
}

input DeleteClothInput {
  id: String!
  clientMutationId: String!
}

type DeleteClothPayload {
  deletedId: String!
  viewer: Viewer
  clientMutationId: String!
}

input DeleteFactoryInput {
  id: String!
  clientMutationId: String!
}

type DeleteFactoryPayload {
  deletedId: String!
  viewer: Viewer
  clientMutationId: String!
}

input DeletePromoCodeInput {
  id: String!
  clientMutationId: String!
}

type DeletePromoCodePayload {
  deletedId: String!
  viewer: Viewer
  clientMutationId: String!
}

input DeleteTimeSlotTemplateInput {
  id: String!
  clientMutationId: String!
}

type DeleteTimeSlotTemplatePayload {
  deletedId: String!
  viewer: Viewer
  clientMutationId: String!
}

input DeleteWorkerInput {
  id: String!
  clientMutationId: String!
}

type DeleteWorkerPayload {
  deletedId: String!
  viewer: Viewer
  clientMutationId: String!
}

type Factory implements Node {
  id: ID!
  name: String!
  address: String!
  postalCode: String!
  contact: String!
  contactName: String!
}

type FactoryConnection {
  pageInfo: PageInfo!
  edges: [FactoryEdge]
}

type FactoryEdge {
  node: Factory
  cursor: String!
}

type Feedback implements Node {
  id: ID!
  userId: String!
  rating: Float!
  comment: String
  source: String!
  user: User
}

type FeedbackConnection {
  pageInfo: PageInfo!
  edges: [FeedbackEdge]
}

type FeedbackEdge {
  node: Feedback
  cursor: String!
}

type Mutation {
  createCloth(input: CreateClothInput!): CreateClothPayload
  updateCloth(input: UpdateClothInput!): UpdateClothPayload
  deleteCloth(input: DeleteClothInput!): DeleteClothPayload
  createCategory(input: CreateCategoryInput!): CreateCategoryPayload
  updateCategory(input: UpdateCategoryInput!): UpdateCategoryPayload
  deleteCategory(input: DeleteCategoryInput!): DeleteCategoryPayload
  createUser(input: CreateUserInput!): CreateUserPayload
  updateUser(input: UpdateUserInput!): UpdateUserPayload
  createWorker(input: CreateWorkerInput!): CreateWorkerPayload
  updateWorker(input: UpdateWorkerInput!): UpdateWorkerPayload
  deleteWorker(input: DeleteWorkerInput!): DeleteWorkerPayload
  createAdmin(input: CreateAdminInput!): CreateAdminPayload
  updateAdmin(input: UpdateAdminInput!): UpdateAdminPayload
  deleteAdmin(input: DeleteAdminInput!): DeleteAdminPayload
  createAddress(input: CreateAddressInput!): CreateAddressPayload
  updateAddress(input: UpdateAddressInput!): UpdateAddressPayload
  deleteAddress(input: DeleteAddressInput!): DeleteAddressPayload
  createVoucher(input: CreateVoucherInput!): CreateVoucherPayload
  createOrder(input: CreateOrderInput!): CreateOrderPayload
  updateOrder(input: UpdateOrderInput!): UpdateOrderPayload
  createTimeSlotTemplate(input: CreateTimeSlotTemplateInput!): CreateTimeSlotTemplatePayload
  updateTimeSlotTemplate(input: UpdateTimeSlotTemplateInput!): UpdateTimeSlotTemplatePayload
  deleteTimeSlotTemplate(input: DeleteTimeSlotTemplateInput!): DeleteTimeSlotTemplatePayload
  updateTimeSlot(input: UpdateTimeSlotInput!): UpdateTimeSlotPayload
  createFactory(input: CreateFactoryInput!): CreateFactoryPayload
  updateFactory(input: UpdateFactoryInput!): UpdateFactoryPayload
  deleteFactory(input: DeleteFactoryInput!): DeleteFactoryPayload
  createPromoCode(input: CreatePromoCodeInput!): CreatePromoCodePayload
  updatePromoCode(input: UpdatePromoCodeInput!): UpdatePromoCodePayload
  deletePromoCode(input: DeletePromoCodeInput!): DeletePromoCodePayload
  createFeedback(input: CreateFeedbackInput!): CreateFeedbackPayload
  createBanner(input: CreateBannerInput!): CreateBannerPayload
  updateBanner(input: UpdateBannerInput!): UpdateBannerPayload
  deleteBanner(input: DeleteBannerInput!): DeleteBannerPayload
}

interface Node {
  id: ID!
}

type Order implements Node {
  id: ID!
  userId: String!
  express: Boolean
  note: String
  status: String
  pickupDate: String!
  pickupTime: String!
  pickupAddress: String!
  pickupWorkerId: String
  serialNumber: String
  totalPrice: Int
  userAvatar: String
  orderItems(after: String, first: Int, before: String, last: Int): OrderItemConnection
}

type OrderConnection {
  pageInfo: PageInfo!
  edges: [OrderEdge]
}

type OrderEdge {
  node: Order
  cursor: String!
}

type OrderItem implements Node {
  id: ID!
  productId: String!
  washType: String
  quantity: String!
  serialNumber: String!
  itemPrice: Int!
  itemNameCn: String!
  itemNameEn: String!
  itemImageUrl: String!
}

type OrderItemConnection {
  pageInfo: PageInfo!
  edges: [OrderItemEdge]
}

type OrderItemEdge {
  node: OrderItem
  cursor: String!
}

input OrderItemInput {
  productId: String!
  washType: String
  quantity: String!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type PromoCode implements Node {
  id: ID!
  enabled: Boolean!
  code: String
  name: String!
  description: String
  start: String!
  end: String!
  perUserLimit: Int!
  limit: Int!
  promoType: String!
  promoValue: Int!
  amount: Int!
  multipleUse: Boolean!
  mobileOnly: Boolean!
  firstTimeUser: Boolean!
}

type PromoCodeConnection {
  pageInfo: PageInfo!
  edges: [PromoCodeEdge]
}

type PromoCodeEdge {
  node: PromoCode
  cursor: String!
}

type Query {
  viewer: Viewer
  node(id: ID!): Node
}

type TimeSlot implements Node {
  id: ID!
  date: Int!
  limit: Int
  enabled: Boolean
  start: String!
  end: String!
}

type TimeSlotConnection {
  pageInfo: PageInfo!
  edges: [TimeSlotEdge]
}

type TimeSlotEdge {
  node: TimeSlot
  cursor: String!
}

type TimeSlotTemplate implements Node {
  id: ID!
  start: Int!
  end: Int!
  limit: Int!
}

type TimeSlotTemplateConnection {
  pageInfo: PageInfo!
  edges: [TimeSlotTemplateEdge]
}

type TimeSlotTemplateEdge {
  node: TimeSlotTemplate
  cursor: String!
}

type Transaction implements Node {
  id: ID!
  walletId: String!
  value: Int!
  currency: String!
  referenceNo: String!
  paymentMode: String!
  paymentChannel: String!
  status: String!
  createdAt: String!
  user: UserReference
}

type TransactionConnection {
  pageInfo: PageInfo!
  edges: [TransactionEdge]
}

type TransactionEdge {
  node: Transaction
  cursor: String!
}

input UpdateAddressInput {
  id: String!
  postalCode: String
  address: String
  contact: String
  clientMutationId: String!
}

type UpdateAddressPayload {
  address: Address
  clientMutationId: String!
}

input UpdateAdminInput {
  id: String!
  password: String
  name: String
  contact: String
  clientMutationId: String!
}

type UpdateAdminPayload {
  admin: Admin
  clientMutationId: String!
}

input UpdateBannerInput {
  id: String!
  enabled: Boolean
  title: String
  link: String
  position: Int
  clientMutationId: String!
}

type UpdateBannerPayload {
  banner: Banner
  clientMutationId: String!
}

input UpdateCategoryInput {
  id: String!
  nameCn: String
  nameEn: String
  clientMutationId: String!
}

type UpdateCategoryPayload {
  category: ClothCategory
  clientMutationId: String!
}

input UpdateClothInput {
  id: String!
  categoryId: String
  nameEn: String
  nameCn: String
  washPrice: Float
  dryCleanPrice: Float
  ironPrice: Float
  washPriceDiscount: Float
  dryCleanPriceDiscount: Float
  ironPriceDiscount: Float
  special: Boolean
  clientMutationId: String!
}

type UpdateClothPayload {
  cloth: Cloth
  clientMutationId: String!
}

input UpdateFactoryInput {
  id: String!
  name: String
  address: String
  postalCode: String
  contact: String
  contactName: String
  clientMutationId: String!
}

type UpdateFactoryPayload {
  factory: Factory
  clientMutationId: String!
}

input UpdateOrderInput {
  id: String!
  express: Boolean
  note: String
  status: String
  pickupDate: String
  pickupTime: String
  pickupAddress: String
  pickupWorkerId: String
  clientMutationId: String!
}

type UpdateOrderPayload {
  order: Order
  clientMutationId: String!
}

input UpdatePromoCodeInput {
  id: String!
  enabled: Boolean
  name: String
  description: String
  start: String
  end: String
  perUserLimit: Int
  limit: Int
  promoType: String
  promoValue: Int
  amount: Int
  multipleUse: Boolean
  mobileOnly: Boolean
  firstTimeUser: Boolean
  clientMutationId: String!
}

type UpdatePromoCodePayload {
  promoCode: PromoCode
  clientMutationId: String!
}

input UpdateTimeSlotInput {
  id: String!
  date: Int!
  limit: Int
  enabled: Boolean
  clientMutationId: String!
}

type UpdateTimeSlotPayload {
  timeSlot: TimeSlot
  clientMutationId: String!
}

input UpdateTimeSlotTemplateInput {
  id: String!
  start: Int
  end: Int
  limit: Int
  clientMutationId: String!
}

type UpdateTimeSlotTemplatePayload {
  timeSlotTemplate: TimeSlotTemplate
  clientMutationId: String!
}

input UpdateUserInput {
  id: String!
  password: String
  name: String
  contact: String
  enabled: Boolean
  clientMutationId: String!
}

type UpdateUserPayload {
  user: User
  clientMutationId: String!
}

input UpdateWorkerInput {
  id: String!
  password: String
  name: String
  contact: String
  enabled: Boolean
  clientMutationId: String!
}

type UpdateWorkerPayload {
  worker: Worker
  clientMutationId: String!
}

type User implements Node {
  id: ID!
  email: String!
  name: String
  contact: String
  enabled: Boolean
  avatarUrl: String
  emailVerified: Boolean
  contactVerified: Boolean
  addresses(after: String, first: Int, before: String, last: Int): AddressConnection
  vouchers(all: Boolean, search: String, after: String, first: Int, before: String, last: Int): VoucherConnection
  order(serialNumber: String!): Order
  orders(search: String, after: String, first: Int, before: String, last: Int): OrderConnection
  transactions(search: String, after: String, first: Int, before: String, last: Int): TransactionConnection
  wallet: Wallet
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]
}

type UserEdge {
  node: User
  cursor: String!
}

type UserReference {
  id: String!
  name: String!
  email: String!
}

type Viewer implements Node {
  id: ID!
  user(id: String!): User
  worker(id: String!): Worker
  admin(id: String!): Admin
  users(search: String, after: String, first: Int, before: String, last: Int): UserConnection
  workers(search: String, after: String, first: Int, before: String, last: Int): WorkerConnection
  admins(search: String, after: String, first: Int, before: String, last: Int): AdminConnection
  orders(userId: String, search: String, status: [String], afterDate: String, beforeDate: String, after: String, first: Int, before: String, last: Int): OrderConnection
  transactions(search: String, after: String, first: Int, before: String, last: Int): TransactionConnection
  cloth(id: String!): Cloth
  clothes(after: String, first: Int, before: String, last: Int): ClothConnection
  categories(after: String, first: Int, before: String, last: Int): ClothCategoryConnection
  timeSlotTemplates(after: String, first: Int, before: String, last: Int): TimeSlotTemplateConnection
  timeSlots(date: String!, after: String, first: Int, before: String, last: Int): TimeSlotConnection
  factories(search: String, after: String, first: Int, before: String, last: Int): FactoryConnection
  promoCodes(search: String, after: String, first: Int, before: String, last: Int): PromoCodeConnection
  banners(search: String, after: String, first: Int, before: String, last: Int): BannerConnection
  feedbacks(search: String, after: String, first: Int, before: String, last: Int): FeedbackConnection
  orderStatus: [String]
}

type Voucher implements Node {
  id: ID!
  userId: String!
  title: String!
  value: Float!
  expireOn: String!
  used: Boolean!
  usedAt: String
  usedOnOrderId: String
}

type VoucherConnection {
  pageInfo: PageInfo!
  edges: [VoucherEdge]
}

type VoucherEdge {
  node: Voucher
  cursor: String!
}

type Wallet implements Node {
  id: ID!
  credit: Int!
  freeze: Boolean!
}

type Worker implements Node {
  id: ID!
  email: String!
  name: String!
  contact: String!
  enabled: Boolean!
  avatarUrl: String
}

type WorkerConnection {
  pageInfo: PageInfo!
  edges: [WorkerEdge]
}

type WorkerEdge {
  node: Worker
  cursor: String!
}
