schema {
  query: Query
  mutation: Mutation
}

type Cloth implements Node {
  id: ID!
  nameEn: String!
  nameCn: String!
  washPrice: Float!
  dryCleanPrice: Float!
  ironPrice: Float!
  washPriceDiscount: Float
  dryCleanPriceDiscount: Float
  ironPriceDiscount: Float
  special: Boolean
  imageUrl: String
}

type ClothConnection {
  pageInfo: PageInfo!
  edges: [ClothEdge]
}

type ClothEdge {
  node: Cloth
  cursor: String!
}

type ClothPagination {
  id: ID!
  pagination: Pagination!
  datas: [Cloth]
}

input CreateLaundryClothInput {
  limit: Int!
  nameEn: String!
  nameCn: String!
  washPrice: Float!
  dryCleanPrice: Float!
  ironPrice: Float!
  washPriceDiscount: Float
  dryCleanPriceDiscount: Float
  ironPriceDiscount: Float
  special: Boolean
  imageUrl: String
  clientMutationId: String!
}

type CreateLaundryClothPayload {
  clothPage: ClothPagination
  clientMutationId: String!
}

input CreateUserInput {
  role: String!
  email: String!
  password: String!
  clientMutationId: String!
}

type CreateUserPayload {
  userEdge: UserEdge
  clientMutationId: String!
}

type Mutation {
  createUser(input: CreateUserInput!): CreateUserPayload
  createLaundryCloth(input: CreateLaundryClothInput!): CreateLaundryClothPayload
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Pagination {
  search: String
  totalPage: Int!
  page: Int!
  limit: Int!
}

type Query {
  viewer: Viewer
  node(id: ID!): Node
}

enum Role {
  Client
  Worker
  Admin
}

type User implements Node {
  id: ID!
  role: Role!
  email: String!
  name: String
  contact: String
  avatarUrl: String
  emailVerified: Boolean
  contactVerified: Boolean
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]
}

type UserEdge {
  node: User
  cursor: String!
}

type UserPagination {
  pagination: Pagination!
  datas: [User]
}

type Viewer implements Node {
  id: ID!
  user(token: String!): User
  userPage(role: String!, search: String, page: Int!, limit: Int!): UserPagination
  userScroll(role: String!, search: String, after: String, first: Int, before: String, last: Int): UserConnection
  cloth(id: String!): Cloth
  clothPage(search: String, page: Int!, limit: Int!): ClothPagination
  clothScroll(search: String, after: String, first: Int, before: String, last: Int): ClothConnection
}
